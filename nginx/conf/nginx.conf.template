server {
    listen 80;
	listen [::]:80;
    server_name localhost;
    return 301 https://$host$request_uri;
}

server {
	listen [::]:443;
	listen 443 ssl;
	http2 on;
	server_name localhost;

	ssl_protocols TLSv1.2 TLSv1.3; # Only use LTS versions of TLS
	ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384'; # Strong ciphers

	ssl_certificate /etc/nginx/ssl/cert.crt;
	ssl_certificate_key /etc/nginx/ssl/cert.key;


	location / {
		proxy_pass http://frontend:${FRONTEND_PORT};
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection 'upgrade';
		proxy_set_header Host $host;
		proxy_cache_bypass $http_upgrade;
	}

	location ^~ /api/ {
		client_max_body_size 100M;
		proxy_pass http://backend:${BACKEND_PORT}/;

		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $host;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}

	location  ^~ /socket.io/ {
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $http_host;
		proxy_set_header X-NginX-Proxy false;

			proxy_pass http://backend:${BACKEND_PORT}/socket.io/;
		proxy_redirect off;
		
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;
}
